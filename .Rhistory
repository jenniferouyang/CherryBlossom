runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyApp(
ui = fluidPage(
bootstrapPage(tags$style(type = "text/css", "html, body, .leaflet {width:100%; height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
selectizeInput("Year", "Choose the year of the animated map!",
choices = 1953:2020),
uiOutput(outputId = "slider1")),
leafletOutput("japanmap"),
plotOutput("graph"),
textOutput()
),
server = function(input, output) {
output$slider1 <- renderUI({
sliderInput("date", "Date:",
as.Date(paste(c(input$Year, "03-10"), collapse = "-")),
as.Date(paste(c(input$Year, "05-10"), collapse = "-")),
value = as.Date(paste(c(input$Year, "05-10"), collapse = "-")),
step = 2,
animate = T)
})
output$japanmap <- renderLeaflet({
print(input$leaflet1_shape_click$id)
japanmap %>%
leaflet() %>%
addPolygons(color = "black",
#fillColor = ~color2(japanmap$days),
fillOpacity = 0.7,
opacity = 1,
weight = 1)
})
observeEvent(input$date, {
japanmap@data[ ,input$Year] <-   japanmap@data[ ,input$Year] %>%
as.Date(format = "%m/%d/%Y")
japanmap@data <- japanmap@data %>%
mutate(days = japanmap@data[ ,input$Year] - input$date)
japanmap@data$days <- japanmap@data$days %>% as.numeric()
leafletProxy("japanmap", data = japanmap) %>%
#clearShapes() %>%
addPolygons(fillColor = ~color2(japanmap@data$days),
color = "black",
#fillColor = ~color2(japanmap$days),
fillOpacity = 0.7,
opacity = 1,
weight = 1)
})
output$graph <- renderPlot({
sakuradatalong %>%
filter(name == "Hokkaido") %>%
mutate(date = as.Date(date, format = "%m-%d")) %>%
ggplot(aes(x = year,
y = date)) +
geom_point() +
geom_smooth(
se = FALSE) +
geom_line() +
theme_bw() + xlab("Date") + ylab("Year")
})
}
)
sakuradatalong
View(sakuradata)
View(sakuradatalong)
library(ggplot2)
library(rvest)
library(dplyr)
library(leaflet)
library(geojsonio)
library(rgdal)
library(RColorBrewer)
library(tidyverse)
library(shiny)
sakuradata <- read_csv("sakura_first_bloom_dates.csv")
japanmap <- geojson_read("japan_prefectures.geojson", what = "sp")
japanmap@data <- japanmap@data %>% select(name_1) %>% rename(name = name_1)
###Modify the sakuradata so that place names are prefectures
japanmap$name <- japanmap$name %>%
replace(33, "Hyogo")
sakuradatacopy <- read_csv("sakura.csv")
japanmap@data <- japanmap@data %>% inner_join(sakuradatacopy, by = c("name" = "Site Name"))
sakuradata <- japanmap@data
#cOLOR
date<-seq(as.Date("2020-03-10"), as.Date("2020-5-10"), by="day")
sakuracolor <- c("grey95", "thistle1", "plum1", "darkorchid", "plum1", "thistle1", "grey95")
color2 <- colorBin(palette = sakuracolor,
bins = c(-100, -7, -3, 0, 3, 7, 100))
###Part 2 graph
summary(sakuradata)
sakuradata <- sakuradata %>%
select(-`Currently Being Observed`, -Notes, -`30 Year Average 1981-2010`)
sakuradatalong <- sakuradata %>%
pivot_longer(!name, names_to = "year",
values_to = "date")
sakuradatalong$year <- sakuradatalong$year %>%
as.numeric()
sakuradatalong$date <- sakuradatalong$date %>%
as.Date(format = "%m/%d/%Y")
sakuradatalong$date <-str_sub(sakuradatalong$date, start = 6, end = -1)
shinyApp(
ui = fluidPage(
bootstrapPage(tags$style(type = "text/css", "html, body, .leaflet {width:100%; height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
selectizeInput("Year", "Choose the year of the animated map!",
choices = 1953:2020),
uiOutput(outputId = "slider1")),
selectizeInput("Prefecture", "Choose the prefecture",
choices = ),
leafletOutput("japanmap"),
plotOutput("graph"),
textOutput("Text")
),
server = function(input, output) {
output$slider1 <- renderUI({
sliderInput("date", "Date:",
as.Date(paste(c(input$Year, "03-10"), collapse = "-")),
as.Date(paste(c(input$Year, "05-10"), collapse = "-")),
value = as.Date(paste(c(input$Year, "05-10"), collapse = "-")),
step = 2,
animate = T)
})
output$japanmap <- renderLeaflet({
print(input$leaflet1_shape_click$id)
japanmap %>%
leaflet() %>%
addPolygons(color = "black",
#fillColor = ~color2(japanmap$days),
fillOpacity = 0.7,
opacity = 1,
weight = 1)
})
observeEvent(input$date, {
japanmap@data[ ,input$Year] <-   japanmap@data[ ,input$Year] %>%
as.Date(format = "%m/%d/%Y")
japanmap@data <- japanmap@data %>%
mutate(days = japanmap@data[ ,input$Year] - input$date)
japanmap@data$days <- japanmap@data$days %>% as.numeric()
leafletProxy("japanmap", data = japanmap) %>%
#clearShapes() %>%
addPolygons(fillColor = ~color2(japanmap@data$days),
color = "black",
#fillColor = ~color2(japanmap$days),
fillOpacity = 0.7,
opacity = 1,
weight = 1)
})
output$graph <- renderPlot({
sakuradatalong %>%
filter(name == "Hokkaido") %>%
mutate(date = as.Date(date, format = "%m-%d")) %>%
ggplot(aes(x = year,
y = date)) +
geom_point() +
geom_smooth(
se = FALSE) +
geom_line() +
theme_bw() + xlab("Date") + ylab("Year")
})
}
)
View(sakuradatalong)
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(gganimate)
library(rvest)
library(dplyr)
library(leaflet)
library(geojsonio)
library(rgdal)
library(RColorBrewer)
library(tidyverse)
library(shiny)
tempurl %>%
read_html("https://data.giss.nasa.gov/gistemp/graphs/graph_data/Global_Mean_Estimates_based_on_Land_and_Ocean_Data/graph.txt") %>%
html_node(xpath = path1) %>%
html_table(fill = TRUE)
tempurl <- "https://data.giss.nasa.gov/gistemp/graphs/graph_data/Global_Mean_Estimates_based_on_Land_and_Ocean_Data/graph.txt"
tempurl %>%
read_html() %>%
html_node(xpath = path1) %>%
html_table(fill = TRUE)
tempurl %>%
read_html() %>%
html_node() %>%
html_table(fill = TRUE)
tempurl %>%
read_html() %>%
html_table(fill = TRUE)
tempurl <- "https://pkgstore.datahub.io/core/global-temp/annual_csv/data/a26b154688b061cdd04f1df36e4408be/annual_csv.csv"
read_csv(tempurl)
read_csv(tempurl) %>%
filter(Source == "GCAG")
temp <- read_csv(tempurl) %>%
filter(Source == "GCAG")
temp <- read_csv(tempurl) %>%
filter(Source == "GCAG")
temp
temp <- read_csv(tempurl) %>%
filter(Source == "GCAG") %>%
filter(Year > 1953)
temp
tempurl <- "https://pkgstore.datahub.io/core/global-temp/annual_csv/data/a26b154688b061cdd04f1df36e4408be/annual_csv.csv"
temp <- read_csv(tempurl) %>%
filter(Source == "GCAG") %>%
filter(Year > 1952)
temp
#Scraping temperature Data
tempurl <- "https://pkgstore.datahub.io/core/global-temp/annual_csv/data/a26b154688b061cdd04f1df36e4408be/annual_csv.csv"
temp <- read_csv(tempurl) %>%
filter(Source == "GCAG") %>%
filter(Year > 1952)
sakuradatalong %>%
filter(name == input$Prefecture) %>%
mutate(date = as.Date(date, format = "%m-%d")) %>%
ggplot(aes(x = year,
y = date)) +
geom_point() +
geom_smooth(
method = "lm",
se = FALSE) +
geom_line() +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
aes(x = Year,
y = Mean)
sakuradatalong %>%
filter(name == input$Prefecture) %>%
mutate(date = as.Date(date, format = "%m-%d")) %>%
ggplot(aes(x = year,
y = date)) +
geom_point() +
geom_smooth(
method = "lm",
se = FALSE) +
geom_line() +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
aes(x = Year,
y = Mean))
runApp()
sakuradatalong %>%
filter(name == Iwate) %>%
mutate(date = as.Date(date, format = "%m-%d")) %>%
ggplot(aes(x = year,
y = date)) +
geom_point() +
geom_smooth(
method = "lm",
se = FALSE) +
geom_line() +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
aes(x = Year,
y = Mean))
sakuradatalong %>%
filter(name == Iwate) %>%
mutate(date = as.Date(date, format = "%m-%d")) %>%
ggplot(aes(x = year,
y = date)) +
geom_point() +
geom_smooth(
method = "lm",
se = FALSE) +
geom_line() +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
aes(x = Year,
y = Mean))
sakuradatalong %>%
filter(name == "Iwate") %>%
mutate(date = as.Date(date, format = "%m-%d")) %>%
ggplot(aes(x = year,
y = date)) +
geom_point() +
geom_smooth(
method = "lm",
se = FALSE) +
geom_line() +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
aes(x = Year,
y = Mean))
ggplot() + geom_point(sakuradatalong %>%
filter(name == "Iwate") %>%
mutate(date = as.Date(date, format = "%m-%d")),(aes(x = year,
y = date)))
ggplot() + geom_point(sakuradatalong %>%
filter(name == "Iwate") %>%
mutate(date = as.Date(date, format = "%m-%d")),(aes(x = year,
y = date)))
sakuradatalong <- sakuradatalong %>%
filter(name == "Iwate") %>%
mutate(date = as.Date(date, format = "%m-%d"))
ggplot() +
geom_point(sakuradatalong, aes(x = year,
y = date)) +
geom_smooth(
method = "lm",
se = FALSE) +
geom_line() +
theme_bw() + xlab("Date") + ylab("Year")
ggplot() +
geom_point(sakuradatalong, aes(x = year,
y = date)) +
geom_smooth(
method = "lm",
se = FALSE) +
geom_line() +
theme_bw() + xlab("Date") + ylab("Year")
ggplot() +
geom_point(sakuradatalong, aes(x = year,
y = date)) +
geom_smooth(
method = "lm",
se = FALSE) +
geom_line() +
theme_bw() + xlab("Date") + ylab("Year")
ggplot() +
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(
method = "lm",
se = FALSE) +
geom_line() +
theme_bw() + xlab("Date") + ylab("Year")
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
method = "lm",
se = FALSE) +
geom_line(sakuradatalong) +
theme_bw() + xlab("Date") + ylab("Year")
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
method = "lm",
se = FALSE) +
geom_line(sakuradatalong) +
theme_bw() + xlab("Date") + ylab("Year")
ggplot() +
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
mapping= aes(x = year,
y = date),
method = "lm",
se = FALSE) +
theme_bw() + xlab("Date") + ylab("Year")
lab("Date") + ylab("Year") +
geom_line(temp,
mapping = aes(x = Year,
y = Mean))
ggplot() +
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
mapping= aes(x = year,
y = date),
method = "lm",
se = FALSE) +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
mapping = aes(x = Year,
y = Mean))
ggplot() +
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
mapping= aes(x = year,
y = date),
method = "lm",
se = FALSE) +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
mapping = aes(x = Year,
y = Mean))
ggplot() +
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
mapping= aes(x = year,
y = date),
method = "lm",
se = FALSE) +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
mapping = aes(x = as.Date(Year),
y = Mean))
ggplot() +
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
mapping= aes(x = year,
y = date),
method = "lm",
se = FALSE) +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
mapping = aes(x = as.Date(Year),
y = Mean))
ggplot() +
```
ggplot() +
geom_line(temp,
mapping = aes(x = name,
y = Mean))
ggplot() +
geom_line(temp,
mapping = aes(x = name,
y = Mean))
ggplot() +
geom_line(temp,
mapping = aes(x = Year,
y = Mean))
ggplot() +
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
mapping= aes(x = year,
y = date),
method = "lm",
se = FALSE) +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
mapping = aes(x = as.Date(Year),
y = Mean)) +
geom_line(temp,
mapping = aes(x = Year,
y = Mean))
ggplot() +
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
mapping= aes(x = year,
y = date),
method = "lm",
se = FALSE) +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
mapping = aes(x = as.Date(Year),
y = Mean)) +
geom_line(temp,
mapping = aes(x = Year,
y = Mean))
ggplot() +
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
mapping= aes(x = year,
y = date),
method = "lm",
se = FALSE) +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
mapping = aes(x = Year,
y = Mean))
ggplot() +
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
mapping= aes(x = year,
y = date),
method = "lm",
se = FALSE) +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
mapping = aes(y = Mean))
ggplot() +
geom_point(sakuradatalong,
mapping= aes(x = year,
y = date)) +
geom_smooth(sakuradatalong,
mapping= aes(x = year,
y = date),
method = "lm",
se = FALSE) +
theme_bw() + xlab("Date") + ylab("Year") +
geom_line(temp,
mapping = aes(y = Mean))
runApp()
runApp()
runApp()
runApp()
?rendertext
?renderText
runApp()
runApp()
runApp()
runApp()
runApp()
